setwd("~/Desktop/CSC8631_Report")
library(ProjectTemplate)
load.project()
countries_w_name <- countries %>%
mutate(country_name = countrycode(sourcevar = detected_country,          # calling on the countrycode function and accessing the detected_country column
origin = "iso2c",                           # taking the original 2 digit country code
destination = "country.name",               # Outputting the country name
custom_match = c("XK" = "Kosovo"))) %>%     # initial analysis showed that there was no match with Kosovo so adding that manually
# Now doing the same for region
mutate(region = countrycode(sourcevar = country_name,                    # Pairing the new country name column with countrycode's region
origin = "country.name",                     # taking the new country name column
destination = "region",                      # and pairing that with region
custom_match = c("R?union" = "Sub-Saharan Africa"))) # initial analysis showed that there was no match with R?union so adding that manually
countries_w_name
View(countries_w_name)
View(countries_w_name)
countries_w_name <- countries %>%
mutate(country_name = countrycode(sourcevar = detected_country,          # calling on the countrycode function and accessing the detected_country column
origin = "iso2c",                           # taking the original 2 digit country code
destination = "country.name",               # Outputting the country name
custom_match = c("XK" = "Kosovo"))) %>%     # initial analysis showed that there was no match with Kosovo so adding that manually
# Now doing the same for region
mutate(region = countrycode(sourcevar = country_name,                    # Pairing the new country name column with countrycode's region
origin = "country.name",                     # taking the new country name column
destination = "region",                      # and pairing that with region
custom_match = c("R?union" = "Sub-Saharan Africa")))
countries_w_name <- countries %>%
mutate(country_name = countrycode(sourcevar = detected_country,          # calling on the countrycode function and accessing the detected_country column
origin = "iso2c",                           # taking the original 2 digit country code
destination = "country.name",               # Outputting the country name
custom_match = c("XK" = "Kosovo"))) %>%     # initial analysis showed that there was no match with Kosovo so adding that manually
# Now doing the same for region
mutate(region = countrycode(sourcevar = country_name,                    # Pairing the new country name column with countrycode's region
origin = "country.name",                     # taking the new country name column
destination = "region",                      # and pairing that with region
custom_match = c("Réunion" = "Sub-Saharan Africa"))) # initial analysis showed that there was no match with Réunion so adding that manually
country_boxplot <- ggplot(countries_w_name, aes(x=region, y=n, fill=region)) +
geom_boxplot() +                                                               # tried a boxplot this time
geom_point(position=position_jitterdodge(),alpha=0.3) +                        # including the points, lightened them and ensured their positioning is good
scale_y_log10() +
theme_minimal() +
labs(title = "Number of student enrolments by country and region, highlighting the most and least enrolled countries",
x = "Region", y = "Number of enrolments (log scale)")
# Too many labels for all the countries so want to only show the countries that have the most and least enrolments
head_tail = countries_w_name %>% {       # Pipe the data
rbind(head(., 10), tail(., 10))        # bind the most and least through the head and tail, set the amount to 10
} %>%
group_by(country_name, n)              # group the bind by country name and numbers
country_boxplot + geom_text_repel(data=head_tail, aes(label=country_name))   # layer the original plot with the text from the head_tail data
# Save the plot as an image
ggsave(filename = 'graphs/2_enrolments_by_region.png', width=3, height=3, units="in", scale=3)
# Save the plot as an image
ggsave(filename = 'graphs/2_enrolments_by_region.png', width=4, height=3, units="in", scale=3)
# Save the plot as an image
ggsave(filename = 'graphs/2_enrolments_by_region.png', width=4.5, height=3, units="in", scale=3)
# Save the plot as an image
ggsave(filename = 'graphs/2_enrolments_by_region.png', width=4.5, height=3, units="in", scale=3)
plot_num_of_students <- ggplot(num_of_students_per_run, aes(x=run, y=n)) +
geom_line() +                        # including a line to highlight
geom_point(colour="deeppink1", size=3) +     # changing the colour of the points
xlim(0, 7) +                         # setting the limits of the x axis
ylim(0, 15000) +                     # setting the limits of the y axis
theme_light() +                      # want a white background
labs(title = "Number of student enrolments per run",
x = "Run", y = "Number of students")
plot_num_of_students
# Save the plot as an image
ggsave(filename = 'graphs/1_number_of_enrolments', width=3, height=3, units="in", scale=3)
rlang::last_error()
# Save the plot as an image
ggsave(filename = 'graphs/1_number_of_enrolments', width=3, height=3, units="in", scale=3)
# Save the plot as an image
ggsave(filename = 'graphs/1_number_of_enrolments.png', width=3, height=3, units="in", scale=3)
# Save the plot as an image
ggsave(filename = 'graphs/1_number_of_enrolments.png')
# Save the plot as an image
ggsave(filename = 'graphs/1_number_of_enrolments.png', width=2, height=2, units="in", scale=2)
# Save the plot as an image
ggsave(filename = 'graphs/1_number_of_enrolments.png', dpi=600)
# Save the plot as an image
ggsave(filename = 'graphs/2_enrolments_by_region.png', dpi=600, width=4.5, height=3, units="in", scale=3)
country_boxplot <- ggplot(countries_w_name, aes(x=region, y=n, fill=region)) +
geom_boxplot() +                                                               # tried a boxplot this time
geom_point(position=position_jitterdodge(),alpha=0.3) +                        # including the points, lightened them and ensured their positioning is good
scale_y_log10() +
theme_minimal() +
labs(title = "Number of student enrolments by country and region, highlighting the most and least enrolled countries",
x = "Region", y = "Number of enrolments (log scale)")
# Too many labels for all the countries so want to only show the countries that have the most and least enrolments
head_tail = countries_w_name %>% {       # Pipe the data
rbind(head(., 10), tail(., 10))        # bind the most and least through the head and tail, set the amount to 10
} %>%
group_by(country_name, n)              # group the bind by country name and numbers
country_boxplot + geom_text_repel(data=head_tail, aes(label=country_name))
# Save the plot as an image
ggsave(filename = 'graphs/2_enrolments_by_region.png', dpi=600, width=4.5, height=3, units="in", scale=3)
student_gender_plot <- ggplot(student_gender, aes(x=gender, y=n)) +
geom_bar(aes(x=gender, fill=gender), stat='identity') +
scale_fill_manual("Gender", values = c("#9999CC", "#E69F00", "#009E73", "#0072B2")) +   # want to set the colour so used a colour blind friendly colour pallete
facet_wrap(~run) +                                                                      # want to display plots per run
geom_label(aes(x=gender, label=n)) +                                                    # want to add a label of totals to the bar chart
labs(title="Gender of students per run ",
x="Gender", y="Number of students")
student_gender_plot
student_gender_plot <- ggplot(student_gender, aes(x=gender, y=n)) +
geom_bar(aes(x=gender, fill=gender), stat='identity') +
scale_fill_manual("Gender", values = c("#9999CC", "#E69F00", "#009E73", "#0072B2")) +   # want to set the colour so used a colour blind friendly colour pallete
facet_wrap(~run) +                                                                      # want to display plots per run
geom_label(aes(x=gender, label=n)) +                                                    # want to add a label of totals to the bar chart
labs(title="Gender of students per run ",
x="Gender", y="Number of students")
student_gender_plot
# Save the plot as an image (make sure you run the plot first)
ggsave(filename = 'graphs/3_student_gender.png', dpi=600, width=3, height=3, units="in", scale=3)
# plotting student age data
student_age_plot <- ggplot(student_age, aes(x=age_range, y=n)) +
geom_bar(aes(x=age_range, fill=age_range), stat='identity') +
scale_fill_manual("Age", values = c("#9999CC", "#CC79A7", "#009E73", "#56B4E9", "#F0E442", "#E69F00", "#D55E00")) +
facet_wrap(~run) +
geom_label(aes(x=age_range, label=n)) +
labs(title="Age of students per run ",
x="Age", y="Number of students")
student_age_plot
# Save the plot as an image (make sure you run the plot first)
ggsave(filename = 'graphs/4_student_age.png', dpi=600, width=3, height=3, units="in", scale=3)
student_education_plot <- ggplot(student_education, aes(x=highest_education_level, y=n)) +
geom_bar(aes(x=highest_education_level, fill=highest_education_level), stat='identity') +
scale_fill_manual("Education Level", values = c("#9999CC", "#CC79A7", "#009E73", "#56B4E9", "#F0E442", "#E69F00", "#D55E00", "#0072B2")) +
facet_wrap(~run) +
geom_label(aes(x=highest_education_level, label=n)) +
labs(title="Educational level of students per run ",
x="Education Level", y="Number of students") +
theme(axis.text.x = element_text(angle = 90))            # want the text to be vertical to fit neatly
student_education_plot
# Save the plot as an image (make sure you run the plot first)
ggsave(filename = 'graphs/5_student_education.png', dpi=600, width=3, height=3, units="in", scale=3)
student_employment_plot <- ggplot(student_employment2, aes(x=employment_status, y=total)) +
geom_bar(aes(x=employment_status, fill=employment_status), stat='identity') +
scale_fill_manual("Employment Status", values = c("#9999CC", "#CC79A7", "#009E73", "#56B4E9", "#F0E442", "#E69F00", "#D55E00", "#0072B2")) +
facet_wrap(~run) +
geom_label(aes(x=employment_status, label=total)) +
labs(title="Employment status of students per run ",
x="Employment Status", y="Number of students") +
theme(axis.text.x = element_text(angle = 90))
student_employment_plot
# Save the plot as an image (make sure you run the plot first)
ggsave(filename = 'graphs/6_student_employment.png', dpi=600, width=3, height=3, units="in", scale=3)
